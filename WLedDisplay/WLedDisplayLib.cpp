#include "WLedDisplayLib.h"
#define data1 12
#define latch1 11  // register1
#define clock1 10

#define data2 9
#define latch2 8  // register2
#define clock2 7

#define data3 6
#define latch3 5  // register3
#define clock3 4

#define brightnessPin 3  // pwm pin attached to register1

void write(int x, int y , int z) {  //writes value to screen
  digitalWrite(latch1, LOW);
  shiftOut(data1, clock1, LSBFIRST, x);
  digitalWrite(latch1, HIGH);

  digitalWrite(latch2, LOW);
  shiftOut(data2, clock2, LSBFIRST, y);
  digitalWrite(latch2, HIGH);

  digitalWrite(latch3, LOW);
  shiftOut(data3, clock3, LSBFIRST, z);
  digitalWrite(latch3, HIGH);
}
void brightness(byte b) {
  analogWrite(brightnessPin, 255 - b);  // OE pin is active low, hence 255-b
}
void clear() {  // clears the screen
  write(0x00, 0x00, 0x00);
}
void fill() {  // fills the screen
  write(0xff, 0xff, 0xff);
}
void Random() {  // writes random values to screen
  write(random(0, 256), random(0, 256), random(0, 256));
}
void onebyone(int d) {
  for (int j = 128; j > 0; j = j / 2) {
    for (int i = 128; i > 0; i = i / 2) {
      write(j, i, 0b00000000);
      delay(d);
    }
    for (int i = 128; i > 0; i = i / 2) {
      write(j, 0b00000000, i);
      delay(d);
    }
  }
}
void letters(){
  for(int i = 0 ; i <=26 ; i++){
    for(int k = 0 ; k < 100 ; k++){
    for(int j = 0 ; j < 8 ; j++){
      write(itr[j],alphabet[i][j],smallAlphabet[i][j]);
      clear();
    }
    delay(1);
  }
  }
}
byte itr[8] = {0B10000000,0B01000000,0B00100000,0B00010000,0B00001000,0B00000100,0B00000010,0B00000001};
byte alphabet[27][8] = {{0,0,0,0,0,0,0,0},
    {0B00110000,0B01111000,0B11001100,0B11001100,0B11111100,0B11001100,0B11001100,0B00000000},
    {0B11111100,0B01100110,0B01100110,0B01111100,0B01100110,0B01100110,0B11111100,0B00000000},
    {0B00111100,0B01100110,0B11000000,0B11000000,0B11000000,0B01100110,0B00111100,0B00000000},
    {0B11111000,0B01101100,0B01100110,0B01100110,0B01100110,0B01101100,0B11111000,0B00000000},
    {0B11111110,0B01100010,0B01101000,0B01111000,0B01101000,0B01100010,0B11111110,0B00000000},
    {0B11111110,0B01100010,0B01101000,0B01111000,0B01101000,0B01100000,0B11110000,0B00000000},
    {0B00111100,0B01100110,0B11000000,0B11000000,0B11001110,0B01100110,0B00111110,0B00000000},
    {0B11001100,0B11001100,0B11001100,0B11111100,0B11001100,0B11001100,0B11001100,0B00000000},
    {0B01111000,0B00110000,0B00110000,0B00110000,0B00110000,0B00110000,0B01111000,0B00000000},
    {0B00011110,0B00001100,0B00001100,0B00001100,0B11001100,0B11001100,0B01111000,0B00000000},
    {0B11110110,0B01100110,0B01101100,0B01111000,0B01101100,0B01100110,0B11110110,0B00000000},
    {0B11110000,0B01100000,0B01100000,0B01100000,0B01100010,0B01100110,0B11111110,0B00000000},
    {0B11000110,0B11101110,0B11111110,0B11111110,0B11010110,0B11000110,0B11000110,0B00000000},
    {0B11000110,0B11100110,0B11110110,0B11011110,0B11001110,0B11000110,0B11000110,0B00000000},
    {0B00111000,0B01101100,0B11000110,0B11000110,0B11000110,0B01101100,0B00111000,0B00000000},
    {0B11111100,0B01100110,0B01100110,0B01111100,0B01100000,0B01100000,0B11110000,0B00000000},
    {0B01111000,0B11001100,0B11001100,0B11001100,0B11011100,0B01111000,0B00011100,0B00000000},
    {0B11111100,0B01100110,0B01100110,0B01111100,0B01101100,0B01100110,0B11110110,0B00000000},
    {0B01111000,0B11001100,0B11100000,0B01110000,0B00011100,0B11001100,0B01111000,0B00000000},
    {0B11111100,0B10110100,0B00110000,0B00110000,0B00110000,0B00110000,0B01111000,0B00000000},
    {0B11001100,0B11001100,0B11001100,0B11001100,0B11001100,0B11001100,0B11111100,0B00000000},
    {0B11001100,0B11001100,0B11001100,0B11001100,0B11001100,0B01111000,0B00110000,0B00000000},
    {0B11000110,0B11000110,0B11000110,0B11010110,0B11111110,0B11101110,0B11000110,0B00000000},
    {0B11000110,0B11000110,0B01101100,0B00111000,0B00111000,0B01101100,0B11000110,0B00000000},
    {0B11001100,0B11001100,0B11001100,0B01111000,0B00110000,0B00110000,0B01111000,0B00000000},
    {0B11111110,0B11000110,0B10001100,0B00011000,0B00110010,0B01100110,0B11111110,0B00000000}
};
byte smallAlphabet[27][8] = {{0,0,0,0,0,0,0,0},
    {0b00000000,0b00000000,0b01111000,0b00001100,0b01111100,0b11001100,0b01110110,0b00000000}, // a
    {0b11100000,0b01100000,0b01100000,0b01111100,0b01100110,0b01100110,0b11011100,0b00000000}, // b
    {0b00000000,0b00000000,0b01111000,0b11001100,0b11000000,0b11001100,0b01111000,0b00000000}, // c
    {0b00011100,0b00001100,0b00001100,0b01111100,0b11001100,0b11001100,0b01110110,0b00000000}, // d
    {0b00000000,0b00000000,0b01111000,0b11001100,0b11111100,0b11000000,0b01111000,0b00000000}, // e
    {0b00111000,0b01101100,0b01100000,0b11110000,0b01100000,0b01100000,0b11110000,0b00000000}, // f
    {0b00000000,0b00000000,0b01110110,0b11001100,0b11001100,0b01111100,0b00001100,0b11111000}, // g
    {0b11100000,0b01100000,0b01101100,0b01110110,0b01100110,0b01100110,0b11100110,0b00000000}, // h
    {0b00110000,0b00000000,0b01110000,0b00110000,0b00110000,0b00110000,0b01111000,0b00000000}, // i
    {0b00001100,0b00000000,0b00001100,0b00001100,0b00001100,0b11001100,0b11001100,0b01111000}, // j
    {0b11100000,0b01100000,0b01100110,0b01101100,0b01111000,0b01101100,0b11100110,0b00000000}, // k
    {0b01110000,0b00110000,0b00110000,0b00110000,0b00110000,0b00110000,0b01111000,0b00000000}, // l
    {0b00000000,0b00000000,0b11001100,0b11111110,0b11111110,0b11010110,0b11000110,0b00000000}, // m
    {0b00000000,0b00000000,0b11111000,0b11001100,0b11001100,0b11001100,0b11001100,0b00000000}, // n
    {0b00000000,0b00000000,0b01111000,0b11001100,0b11001100,0b11001100,0b01111000,0b00000000}, // o
    {0b00000000,0b00000000,0b11011100,0b01100110,0b01100110,0b01111100,0b01100000,0b11110000}, // p
    {0b00000000,0b00000000,0b01110110,0b11001100,0b11001100,0b01111100,0b00001100,0b00011110}, // q
    {0b00000000,0b00000000,0b10011100,0b01110110,0b01100110,0b01100000,0b11110000,0b00000000}, // r
    {0b00000000,0b00000000,0b01111100,0b11000000,0b01111000,0b00001100,0b11111000,0b00000000}, // s
    {0b00010000,0b00110000,0b01111100,0b00110000,0b00110000,0b00110100,0b00011000,0b00000000}, // t
    {0b00000000,0b00000000,0b11001100,0b11001100,0b11001100,0b11001100,0b01110110,0b00000000}, // u
    {0b00000000,0b00000000,0b11001100,0b11001100,0b11001100,0b01111000,0b00110000,0b00000000}, // v
    {0b00000000,0b00000000,0b11000110,0b11000110,0b11010110,0b11111110,0b01101100,0b00000000}, // w
    {0b00000000,0b00000000,0b11000110,0b01101100,0b00111000,0b01101100,0b11000110,0b00000000}, // x
    {0b00000000,0b00000000,0b11001100,0b11001100,0b11001100,0b01111100,0b00001100,0b11111000}, // y
    {0b00000000,0b00000000,0b11111100,0b10011000,0b00110000,0b01100100,0b11111100,0b00000000}  // z
};
byte heart[8] = {0b00000000,0b00000000,0b01101100,0b10010010,0b10000010,0b01000100,0b00101000,0b00010000};
void VM(int x) {
 for(int i = 0 ; i < 8 ; i++){
  write(itr[i], alphabet[21][i], alphabet[12][i]);
  clear();
  delay(x);
 }
}
void hearts() {
 for(int i = 0 ; i < 8 ; i++){
  write(itr[i], heart[i], heart[i]);
  clear();
 }
}
void checkers(){

  for(int k = 0 ; k < 100 ; k++){
  for(int i = 0 ; i <=6 ; i+=2){
    write(itr[i],0b10101010,0b10101010);   
    clear();
  }
  for(int i = 1 ; i <= 7 ; i+=2){
    write(itr[i],0b01010101,0b01010101);
    clear();
  }
  delay(1);
  }
for(int k = 0 ; k < 100 ; k++){
  for(int i = 0 ; i <=6 ; i+=2){
    write(itr[i],0b01010101,0b01010101);   
    clear();
  }
  for(int i = 1 ; i <= 7 ; i+=2){
    write(itr[i],0b10101010,0b10101010);
    clear();
  }
  delay(1);
}
}

  byte sine[8] = {0b00000000, 0b00011000, 0b00100100, 0b01000010, 0b00000001, 0b00000000, 0b00000000, 0b00000000};
  byte isine[8] = {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b0000010, 0b10000100, 0b01001000, 0b00110000};
void sin(int n){
    for(int k = 0 ; k < n ; k++){
    for (int i = 0; i < 8; i++)
    {
      write(itr[i], sine[i], isine[i]);
      clear();
    }
   
  }
  for(int j = 0 ; j < 8 ; j++){
    sine[j] = (sine[j]*2+isine[j]/128);
    isine[j] = (isine[j]*2+(sine[j]/128)*2);
    if(sine[j]/128){
      sine[j] = sine[j] - 0b10000000;
    }
    if(isine[j]&1){
      isine[j] = isine[j] - 0b00000001;
    }
  }
}